{"version":3,"sources":["webpack:///./app/index.tsx","webpack:///./app/components/AddContractForm/style.css?ef7c","webpack:///./app/components/WatcherTree/style.css?c2ab","webpack:///./app/components/CheckStatus/index.tsx","webpack:///./app/components/AddContractForm/index.tsx","webpack:///./app/components/ClientTable/index.tsx","webpack:///./app/components/Loader/index.tsx","webpack:///./app/components/Table/index.tsx","webpack:///./app/components/WatcherTree/treeStyles.ts","webpack:///./app/components/WatcherTree/index.tsx","webpack:///./app/containers/App/index.tsx","webpack:///./app/utils/index.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/reducers/clients.ts","webpack:///./app/reducers/contract.ts","webpack:///./app/reducers/contractor.ts","webpack:///./app/reducers/loading.ts","webpack:///./app/reducers/tree.ts","webpack:///./app/reducers/index.ts","webpack:///./main.tsx","webpack:///./app/store/index.ts","webpack:///./app/actions/contracts.ts","webpack:///./app/components/CheckStatus/style.css?f4e7","webpack:///./app/containers/App/style.css?9622","webpack:///./app/components/ClientTable/style.css?8baa","webpack:///./app/components/Loader/style.css?9bdc"],"names":["App","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_4__","module","react__WEBPACK_IMPORTED_MODULE_0__","react_router__WEBPACK_IMPORTED_MODULE_1__","react_router__WEBPACK_IMPORTED_MODULE_2__","path","component","app_containers_App__WEBPACK_IMPORTED_MODULE_3__","exports","form","treeContainer","getCheckableByTreeId","treeId","clients","contracts","contractors","startsWith","client","find","c","ico","parseInt","substr","checkable","type","contract","id","contractor","CheckStatus_SingleChecked","_super","SingleChecked","__extends","prototype","render","singleChecked","this","props","react","className","CheckStatus_style","CheckStatus_CheckStatus","CheckStatus","renderNotFound","_this","_a","treeSelectedId","checkableArray","client_1","clientContracts","filter","includes","map","slice","concat","getCheckableArrayFromTreeId","length","checked","isSingleChecked","some","isAllChecked","onClick","toggleCheckedAll","AddContractForm_AddContractForm","AddContractForm","apply","arguments","state","subject","numberOfErrors","numberOfWords","name","AddContractForm_extends","getDerivedStateFromProps","__assign","onSubmit","e","preventDefault","addContract","updateTreeThunk","AddContractForm_style","htmlFor","value","onChange","val","target","setState","TABLE_HEADER","ClientTable_ClientTable","ClientTable","ClientTable_extends","clientsData","contractorId","rows","cols","ClientTable_style","Table_Table","head","Loader","Loader_style","Table","Table_extends","heading","index","key","row","content","classnames_default","number","styles","tree","base","listStyle","boxShadow","margin","padding","color","fontFamily","fontSize","node","position","link","cursor","display","activeLink","backgroundColor","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","strokeWidth","header","connector","borderLeft","borderBottom","title","lineHeight","subtree","paddingLeft","loading","OldContainer","react_treebeard","Container","WatcherTree_MyContainer","MyContainer","WatcherTree_extends","WatcherTree_assign","active","style","container","WatcherTree_WatcherTree","WatcherTree","onToggle","toggled","nodeId","treeData","WatcherTree_style","data","decorators","App_App","App_extends","componentDidMount","actions","loadContracts","toggleActive","selected","__webpack_exports__","es","dispatch","redux","omitKeys","_i","keys","reduce","res","omit","actions_contracts","logger","store","next","action","clientReducer","handleActions","Type","ADD_CONTRACT","payload","payload_1","clientIndex","findIndex","TOGGLE_CHECKED","contractReducer","contract_a","contractIndex","contractorReducer","contractor_a","newState","forEach","contractorPayload","contractorIndex","loadingReducer","loading_a","SET_LOADING","createDataClients","children","contractId","createDataContractors","toggleNode","isCurrentNode","newData","tree_assign","treeReducer","tree_a","UPDATE_TREE","createData","TOGGLE_ACTIVE","rootReducer","router","react_router_redux_es","main_history","history_es","main_store","history","initialState","middleware","redux_thunk_es","configureStore","react_dom","app","document","getElementById","ContractActions","__awaiter","setLoading","fetch","sent","json","items","item","identifikator","idSmlouvy","console","log","pContracts","predmet","Issues","Prilohy","sum","attachment","WordCount","Prijemce","d","nazev","Platce","Promise","all","loadingError","e_1","toggleChecked","getState","updateTree","redux_actions__WEBPACK_IMPORTED_MODULE_0__","LOADING_ERROR","message","unchecked","button","normal","split-container","right","clientTableContainer","clientTable","loader","lds-ring"],"mappings":"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","file":"4517b442df2e9283dce4.js","sourcesContent":["import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport YottlyApp from 'app/containers/App';\nimport { hot } from 'react-hot-loader';\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={YottlyApp} />\n  </Switch>\n));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"_3P14r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"treeContainer\":\"_3NYav\"};","import * as React from 'react';\nimport * as style from './style.css';\nimport { RootState } from 'app/reducers';\nimport { Checkable, Client } from 'app/models';\n\nexport const getCheckableArrayFromTreeId = (\n  treeId: string,\n  clients: RootState.ClientState,\n  contracts: RootState.ContractState,\n  contractors: RootState.ContractorState\n): { checkable: Checkable; type: string }[] => {\n  if (treeId.startsWith('client_')) {\n    let client: Client | undefined;\n    if (treeId.startsWith('client_contracts_')) {\n      client = clients.find((c) => c.ico === parseInt(treeId.substr(17)));\n    } else {\n      client = clients.find((c) => c.ico === parseInt(treeId.substr(7)));\n    }\n    if (client) {\n      const clientContracts = contracts.filter((c) => (client as Client).contracts.includes(c.id));\n\n      if (treeId.startsWith('client_contracts_')) {\n        return [...clientContracts.map((c) => ({ checkable: c, type: 'contract' }))];\n      } else {\n        return [\n          { checkable: client, type: 'client' },\n          ...clientContracts.map((c) => ({ checkable: c, type: 'contract' }))\n        ];\n      }\n    } else {\n      return [];\n    }\n  } else if (treeId.startsWith('contract_')) {\n    const contract = contracts.find((c) => c.id === parseInt(treeId.substr(9)));\n    return contract ? [{ checkable: contract, type: 'contract' }] : [];\n  } else if (treeId.startsWith('contractor_')) {\n    const contractor = contractors.find((c) => c.ico === parseInt(treeId.substr(11)));\n    return contractor ? [{ checkable: contractor, type: 'contractor' }] : [];\n  } else if (treeId === 'clients') {\n    return [...clients.map((c) => ({ checkable: c, type: 'client' }))];\n  } else if (treeId === 'contractors') {\n    return [...contractors.map((c) => ({ checkable: c, type: 'contractor' }))];\n  } else if (treeId === 'root') {\n    return [\n      ...clients.map((c) => ({ checkable: c, type: 'client' })),\n      ...contracts.map((c) => ({ checkable: c, type: 'contract' })),\n      ...contractors.map((c) => ({ checkable: c, type: 'contractor' }))\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getCheckableByTreeId = (\n  treeId: string,\n  clients: RootState.ClientState,\n  contracts: RootState.ContractState,\n  contractors: RootState.ContractorState\n): { checkable: Checkable; type: string } | null => {\n  if (treeId.startsWith('client_')) {\n    const client = clients.find((c) => c.ico === parseInt(treeId.substr(7)));\n    return client ? { checkable: client, type: 'client' } : null;\n  }\n  if (treeId.startsWith('contract_')) {\n    const contract = contracts.find((c) => c.id === parseInt(treeId.substr(9)));\n    return contract ? { checkable: contract, type: 'contract' } : null;\n  }\n  if (treeId.startsWith('contractor_')) {\n    const contractor = contractors.find((c) => c.ico === parseInt(treeId.substr(11)));\n    return contractor ? { checkable: contractor, type: 'contractor' } : null;\n  }\n  return null;\n};\n\nexport const isSingleChecked = (\n  treeId: string,\n  clients: RootState.ClientState,\n  contracts: RootState.ContractState,\n  contractors: RootState.ContractorState\n): boolean | null => {\n  const checkable = getCheckableByTreeId(treeId, clients, contracts, contractors);\n  return checkable !== null ? checkable.checkable.checked : null;\n};\n\nexport const isAllChecked = (checkableArray: { checkable: Checkable; type: string }[]): boolean => {\n  return !checkableArray.some(({ checkable }) => !checkable.checked);\n};\n\nexport namespace CheckStatus {\n  export interface Props {\n    treeSelectedId: string;\n    clients: RootState.ClientState;\n    contracts: RootState.ContractState;\n    contractors: RootState.ContractorState;\n    toggleCheckedAll: Function;\n  }\n}\n\nexport namespace SingleChecked {\n  export interface Props {\n    singleChecked: boolean | null;\n  }\n}\n\nexport class SingleChecked extends React.Component<SingleChecked.Props> {\n  render() {\n    const { singleChecked } = this.props;\n\n    if (singleChecked === null) {\n      return null;\n    }\n\n    if (singleChecked) {\n      return (\n        <div className={style.message}>\n          <div className={style.checked} />\n          Vybraná položka byla zkontrolována\n        </div>\n      );\n    } else {\n      return (\n        <div className={style.message}>\n          <div className={style.unchecked} />\n          Vybraná položka nebyla zkontrolována\n        </div>\n      );\n    }\n  }\n}\n\nexport class CheckStatus extends React.Component<CheckStatus.Props> {\n  renderNotFound() {\n    return (\n      <div className={style.container}>\n        <p className={style.message}>Pro aktuální výběr nebyla nalezena žádná data</p>\n      </div>\n    );\n  }\n\n  render() {\n    const { treeSelectedId, clients, contracts, contractors } = this.props;\n\n    const checkableArray = getCheckableArrayFromTreeId(\n      treeSelectedId,\n      clients,\n      contracts,\n      contractors\n    );\n    if (!checkableArray.length) {\n      return this.renderNotFound();\n    }\n\n    const singleChecked = isSingleChecked(treeSelectedId, clients, contracts, contractors);\n\n    if (isAllChecked(checkableArray)) {\n      return (\n        <div className={style.container}>\n          <SingleChecked singleChecked={singleChecked} />\n          <div className={style.message}>\n            <div className={style.checked} />V aktálním výběru byly všechny položky zkotrolovány\n          </div>\n          <button\n            className={style.button}\n            onClick={() => {\n              this.props.toggleCheckedAll(checkableArray, false);\n            }}\n          >\n            Označit jako nezkotrolováno\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className={style.container}>\n          <SingleChecked singleChecked={singleChecked} />\n          <div className={style.message}>\n            <div className={style.unchecked} />V aktuálním výběru se nachází alespoň jedna\n            nezkotrolovaná položka\n          </div>\n          <button\n            className={style.button}\n            onClick={() => {\n              this.props.toggleCheckedAll(checkableArray, true);\n            }}\n          >\n            Označit jako zkotrolováno\n          </button>\n        </div>\n      );\n    }\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { RootState } from 'app/reducers';\nimport { Client, Contract, ContractData, Contractor } from 'app/models';\nimport { getCheckableByTreeId } from 'app/components/CheckStatus';\n\nexport namespace AddContractForm {\n  export interface Props {\n    treeSelectedId: string;\n    clients: RootState.ClientState;\n    contracts: RootState.ContractState;\n    contractors: RootState.ContractorState;\n    addContract: Function;\n    updateTreeThunk: Function;\n  }\n\n  export interface State extends ContractData {}\n}\n\nexport class AddContractForm extends React.Component<AddContractForm.Props, AddContractForm.State> {\n  state: AddContractForm.State = {\n    id: 0,\n    subject: '',\n    numberOfErrors: 0,\n    numberOfWords: 0,\n    client: {\n      ico: 0,\n      name: ''\n    },\n    contractors: [\n      {\n        ico: 0,\n        name: ''\n      }\n    ]\n  };\n\n  static getDerivedStateFromProps(\n    props: AddContractForm.Props,\n    state: AddContractForm.State\n  ): AddContractForm.State | null {\n    const { treeSelectedId, clients, contracts, contractors } = props;\n    const checkable = getCheckableByTreeId(treeSelectedId, clients, contracts, contractors);\n    if (checkable) {\n      if (checkable.type === 'client') {\n        const client = checkable.checkable as Client;\n        return { ...state, client: { ico: client.ico, name: client.name } };\n      } else if (checkable.type === 'contractor') {\n        const contractor = checkable.checkable as Contractor;\n        return { ...state, contractors: [{ ico: contractor.ico, name: contractor.name }] };\n      } else if (checkable.type === 'contract') {\n        const contract = checkable.checkable as Contract;\n        return {\n          ...state,\n          id: contract.id,\n          subject: contract.subject,\n          numberOfErrors: contract.numberOfErrors,\n          numberOfWords: contract.numberOfWords\n        };\n      }\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          this.props.addContract({ ...this.state });\n          this.props.updateTreeThunk();\n        }}\n        className={style.form}\n      >\n        <h2>Přidat smlouvu</h2>\n        <label htmlFor=\"contractId\"># smlouvy</label>\n        <input\n          id=\"contractId\"\n          type=\"number\"\n          value={this.state.id}\n          onChange={(e) => {\n            const val = parseInt(e.target.value);\n            this.setState((state) => ({ ...state, id: val }));\n          }}\n        />\n\n        <label htmlFor=\"contractErrors\"># chyb</label>\n        <input\n          id=\"contractErrors\"\n          type=\"number\"\n          value={this.state.numberOfErrors}\n          onChange={(e) => {\n            const val = parseInt(e.target.value);\n            this.setState((state) => ({ ...state, numberOfErrors: val }));\n          }}\n        />\n\n        <label htmlFor=\"contractWords\"># slov</label>\n        <input\n          id=\"contractWords\"\n          type=\"number\"\n          value={this.state.numberOfWords}\n          onChange={(e) => {\n            const val = parseInt(e.target.value);\n            this.setState((state) => ({ ...state, numberOfWords: val }));\n          }}\n        />\n\n        <label htmlFor=\"contractSubject\">Předmět smlouvy</label>\n        <input\n          id=\"contractId\"\n          type=\"text\"\n          value={this.state.subject}\n          onChange={(e) => {\n            const val = e.target.value;\n            this.setState((state) => ({ ...state, subject: val }));\n          }}\n        />\n\n        <h3>Zadavatel</h3>\n        <label htmlFor=\"clientIco\">ICO</label>\n        <input\n          id=\"clientIco\"\n          type=\"number\"\n          value={this.state.client.ico}\n          onChange={(e) => {\n            const val = parseInt(e.target.value);\n            this.setState((state) => ({ ...state, client: { ...state.client, ico: val } }));\n          }}\n        />\n\n        <label htmlFor=\"clientName\">Jméno</label>\n        <input\n          id=\"clientName\"\n          type=\"name\"\n          value={this.state.client.name}\n          onChange={(e) => {\n            const val = e.target.value;\n            this.setState((state) => ({ ...state, client: { ...state.client, name: val } }));\n          }}\n        />\n\n        <h3>Výherce</h3>\n        <label htmlFor=\"contractorIco\">ICO</label>\n        <input\n          id=\"contractorIco\"\n          type=\"number\"\n          value={this.state.contractors[0].ico}\n          onChange={(e) => {\n            const val = parseInt(e.target.value);\n            this.setState((state) => ({\n              ...state,\n              contractors: [{ ...state.contractors[0], ico: val }]\n            }));\n          }}\n        />\n\n        <label htmlFor=\"contractorName\">Jméno</label>\n        <input\n          id=\"contractorName\"\n          type=\"name\"\n          value={this.state.contractors[0].name}\n          onChange={(e) => {\n            const val = e.target.value;\n            this.setState((state) => ({\n              ...state,\n              contractors: [{ ...state.contractors[0], name: val }]\n            }));\n          }}\n        />\n\n        <button type=\"submit\">Přidat</button>\n      </form>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { RootState } from 'app/reducers';\nimport { Table } from 'app/components';\n\nconst TABLE_HEADER = ['Název plátce', 'Předmět zakázky', 'Počet chyb', 'Počet slov'];\n\nexport namespace Footer {\n  export interface Props {\n    clients: RootState.ClientState;\n    contracts: RootState.ContractState;\n  }\n}\n\nexport class ClientTable extends React.Component<Footer.Props> {\n  render() {\n    const { clients, contracts } = this.props;\n    const clientsData = clients.map((client) =>\n      client.contracts.map((contractorId) => {\n        const contract = contracts.find((contract) => contractorId === contract.id)!;\n        if (contract)\n          return [client.name, contract.subject, contract.numberOfErrors, contract.numberOfWords];\n        else return [client.name, 'Nenalezeno'];\n      })\n    );\n    const rows = [].concat.apply([], clientsData).map((cols: string[]) => ({ cols: cols }));\n    return (\n      <div className={style.clientTableContainer}>\n        <Table className={style.clientTable} head={TABLE_HEADER} rows={rows} />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\n\nexport const Loader = () => (\n  <div className={style.loader}>\n    <div className={style.loading}>\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nexport namespace Table {\n  export interface Props {\n    className?: string;\n    head: any[];\n    rows: Row[];\n  }\n\n  export interface Row {\n    cols: any[];\n  }\n}\n\nexport class Table extends React.Component<Table.Props> {\n  render() {\n    const { head, rows, className } = this.props;\n\n    return (\n      <table className={className}>\n        <thead>\n          <tr>\n            {head.map((heading, index) => (\n              <th key={index}>{heading}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, index) => (\n            <tr key={index}>\n              {row.cols.map((content, index) => (\n                <td key={index} className={classNames({ number: typeof content === 'number' })}>\n                  {content}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","export const styles = {\n  tree: {\n    base: {\n      listStyle: 'none',\n      boxShadow: '0 5px 20px 0px rgba(0, 0, 0, 0.1)',\n      margin: 0,\n      padding: 0,\n      color: '#9DA5AB',\n      fontFamily: 'lucida grande ,tahoma,verdana,arial,sans-serif',\n      fontSize: '14px'\n    },\n    node: {\n      base: {\n        position: 'relative'\n      },\n      link: {\n        cursor: 'pointer',\n        padding: '5px 10px',\n        position: 'relative',\n        display: 'block'\n      },\n      activeLink: {\n        backgroundColor: 'rgba(175, 47, 47, 0.15)'\n      },\n      toggle: {\n        base: {\n          position: 'relative',\n          display: 'inline-block',\n          verticalAlign: 'top',\n          marginLeft: '-5px',\n          height: '34px',\n          width: '34px'\n        },\n        wrapper: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          margin: '-7px 0 0 -7px',\n          height: '14px'\n        },\n        height: 14,\n        width: 14,\n        arrow: {\n          fill: 'rgba(175, 47, 47, 0.25)',\n          strokeWidth: 0\n        }\n      },\n      header: {\n        base: {\n          display: 'inline-block',\n          verticalAlign: 'top',\n          color: '#4d4d4d',\n          padding: '5px 10px',\n          cursor: 'pointer'\n        },\n        connector: {\n          width: '2px',\n          height: '12px',\n          borderLeft: 'solid 2px black',\n          borderBottom: 'solid 2px black',\n          position: 'absolute',\n          top: '0px',\n          left: '-21px'\n        },\n        title: {\n          lineHeight: '24px',\n          verticalAlign: 'middle'\n        }\n      },\n      subtree: {\n        listStyle: 'none',\n        paddingLeft: '19px'\n      },\n      loading: {\n        color: '#E2C089'\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport * as style from './style.css';\n\nimport { Treebeard, decorators } from 'react-treebeard';\nimport { styles } from './treeStyles';\n\n/*\n * Selected Tree library unfortunately sucks :(\n * There are no type definitions, no way to pass custom payload (only string id which\n * is then used as key for li element) and styling was broken by some newer version.\n *\n * At this point I would probably start searching for different library\n * or start writing my own (but I feel like that is out of scope this assignment)\n */\n\n/**\n * There is no activeLink logic in default Container decorator.\n * This is my attempt to add this by using composition.\n */\nconst OldContainer = decorators.Container;\n\nclass MyContainer extends React.Component<any, any> {\n  render() {\n    const { node } = this.props;\n\n    const props = {\n      ...this.props\n    };\n    if (node.active) {\n      props.style = {\n        ...this.props.style,\n        container: { ...this.props.style.container, ...this.props.style.activeLink }\n      };\n    }\n    return <OldContainer {...props} />;\n  }\n}\n\ndecorators.Container = MyContainer;\n\nexport namespace WatcherTree {\n  export interface Props {\n    treeData: Treebeard.Data;\n    onToggle: Function;\n  }\n}\n\nexport class WatcherTree extends React.Component<WatcherTree.Props> {\n  onToggle = (node: Treebeard.Data, toggled: boolean) => {\n    const nodeId = node.id || '';\n    this.props.onToggle({ id: nodeId, toggled });\n  };\n\n  render() {\n    const { treeData } = this.props;\n    return (\n      <div className={style.treeContainer}>\n        <Treebeard\n          data={treeData}\n          decorators={decorators}\n          style={styles}\n          onToggle={this.onToggle}\n        />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { RouteComponentProps } from 'react-router';\nimport { ContractActions } from 'app/actions';\nimport { RootState } from 'app/reducers';\nimport { omit } from 'app/utils';\nimport { Loader, ClientTable, WatcherTree, AddContractForm, CheckStatus } from 'app/components';\n\nexport namespace App {\n  export interface Props extends RouteComponentProps<void> {\n    actions: ContractActions;\n    loading: RootState.LoadingState;\n    clients: RootState.ClientState;\n    contracts: RootState.ContractState;\n    contractors: RootState.ContractorState;\n    tree: RootState.TreeState;\n  }\n}\n\nexport class App extends React.Component<App.Props, any> {\n  componentDidMount() {\n    this.props.actions.loadContracts();\n  }\n\n  render() {\n    const { loading, clients, contracts, contractors, tree, actions } = this.props;\n\n    return (\n      <div className={style.normal}>\n        <div className={style['split-container']}>\n          <WatcherTree treeData={tree.data} onToggle={actions.toggleActive} />\n          <div className={style.right}>\n            <ClientTable clients={clients} contracts={contracts} />\n            <CheckStatus\n              treeSelectedId={tree.selected}\n              clients={clients}\n              contracts={contracts}\n              contractors={contractors}\n              toggleCheckedAll={actions.toggleCheckedAll}\n            />\n            {!loading && (\n              <AddContractForm\n                treeSelectedId={tree.selected}\n                clients={clients}\n                contracts={contracts}\n                contractors={contractors}\n                updateTreeThunk={actions.updateTreeThunk}\n                addContract={actions.addContract}\n              />\n            )}\n            {loading && <Loader />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = ({\n  loading,\n  clients,\n  contracts,\n  contractors,\n  tree\n}: RootState): Pick<App.Props, 'loading' | 'clients' | 'contracts' | 'contractors' | 'tree'> => {\n  return { loading, clients, contracts, contractors, tree };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch): Pick<App.Props, 'actions'> => ({\n  actions: bindActionCreators(omit(ContractActions, 'Type'), dispatch)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","export function omit<T extends object, K extends keyof T>(target: T, ...omitKeys: K[]): Omit<T, K> {\n  return (Object.keys(target) as K[]).reduce(\n    (res, key) => {\n      if (!omitKeys.includes(key)) {\n        res[key] = target[key];\n      }\n      return res;\n    },\n    {} as any\n  );\n}\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { ContractActions, ToggleCheckedPayload } from 'app/actions/contracts';\nimport { Client, ContractData } from 'app/models';\n\nconst initialState: RootState.ClientState = [];\n\nexport const clientReducer = handleActions<\n  RootState.ClientState,\n  ContractData | ToggleCheckedPayload\n>(\n  {\n    [ContractActions.Type.ADD_CONTRACT]: (state, action) => {\n      if (action.payload) {\n        const payload = action.payload as ContractData;\n        const clientIndex: number = state.findIndex(\n          (client: Client) => client.ico === payload.client.ico\n        );\n        if (clientIndex < 0) {\n          return [\n            {\n              checked: false,\n              ico: payload.client.ico,\n              name: payload.client.name,\n              contracts: [payload.id]\n            },\n            ...state\n          ];\n        } else {\n          return state\n            .slice(0, clientIndex)\n            .concat([\n              {\n                ...state[clientIndex],\n                contracts: [payload.id, ...state[clientIndex].contracts]\n              }\n            ])\n            .concat(state.slice(clientIndex + 1));\n        }\n      } else {\n        return state;\n      }\n    },\n    [ContractActions.Type.TOGGLE_CHECKED]: (state, action) => {\n      const payload = action.payload as ToggleCheckedPayload;\n      if (payload.type === 'client') {\n        const clientIndex: number = state.findIndex((client: Client) => client.ico === payload.id);\n        return state\n          .slice(0, clientIndex)\n          .concat([\n            {\n              ...state[clientIndex],\n              checked: payload.toggled\n            }\n          ])\n          .concat(state.slice(clientIndex + 1));\n      } else {\n        return state;\n      }\n    }\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { ContractActions, ToggleCheckedPayload } from 'app/actions/contracts';\nimport { ContractData, Contract } from 'app/models';\n\nconst initialState: RootState.ContractState = [];\n\nexport const contractReducer = handleActions<\n  RootState.ContractState,\n  ContractData | ToggleCheckedPayload\n>(\n  {\n    [ContractActions.Type.ADD_CONTRACT]: (state, action) => {\n      const payload = action.payload as ContractData;\n      return [\n        {\n          checked: false,\n          id: payload.id,\n          subject: payload.subject,\n          numberOfErrors: payload.numberOfErrors,\n          numberOfWords: payload.numberOfWords,\n          contractors: payload.contractors.map((contractor) => contractor.ico)\n        },\n        ...state\n      ];\n    },\n    [ContractActions.Type.TOGGLE_CHECKED]: (state, action) => {\n      const payload = action.payload as ToggleCheckedPayload;\n      if (payload.type === 'contract') {\n        const contractIndex: number = state.findIndex(\n          (contract: Contract) => contract.id === payload.id\n        );\n        return state\n          .slice(0, contractIndex)\n          .concat([\n            {\n              ...state[contractIndex],\n              checked: payload.toggled\n            }\n          ])\n          .concat(state.slice(contractIndex + 1));\n      } else {\n        return state;\n      }\n    }\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { ContractActions, ToggleCheckedPayload } from 'app/actions/contracts';\nimport { ContractData, Contractor } from 'app/models';\n\nconst initialState: RootState.ContractorState = [];\n\nexport const contractorReducer = handleActions<\n  RootState.ContractorState,\n  ContractData | ToggleCheckedPayload\n>(\n  {\n    [ContractActions.Type.ADD_CONTRACT]: (state, action) => {\n      const payload = action.payload as ContractData;\n      let newState = state;\n      payload.contractors.forEach((contractorPayload) => {\n        const clientIndex: number = state.findIndex(\n          (contractor: Contractor) => contractor.ico === contractorPayload.ico\n        );\n        if (clientIndex < 0) {\n          newState = [\n            {\n              checked: false,\n              ico: contractorPayload.ico,\n              name: contractorPayload.name\n            },\n            ...newState\n          ];\n        }\n      });\n      return newState;\n    },\n    [ContractActions.Type.TOGGLE_CHECKED]: (state, action) => {\n      const payload = action.payload as ToggleCheckedPayload;\n      if (payload.type === 'contractor') {\n        const contractorIndex: number = state.findIndex(\n          (contractor: Contractor) => contractor.ico === payload.id\n        );\n        return state\n          .slice(0, contractorIndex)\n          .concat([\n            {\n              ...state[contractorIndex],\n              checked: payload.toggled\n            }\n          ])\n          .concat(state.slice(contractorIndex + 1));\n      } else {\n        return state;\n      }\n    }\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { ContractActions } from 'app/actions/contracts';\n\nconst initialState: RootState.LoadingState = true;\n\nexport const loadingReducer = handleActions<RootState.LoadingState, Boolean>(\n  {\n    [ContractActions.Type.SET_LOADING]: (state, action) => {\n      return !!action.payload;\n    }\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { ContractActions, ToggleActivePayload } from 'app/actions/contracts';\nimport { Treebeard } from 'react-treebeard';\n\nconst initialState: RootState.TreeState = {\n  data: {\n    id: 'root',\n    name: 'Hlídač smluv',\n    toggled: true\n  },\n  selected: ''\n};\n\nexport const createData = (\n  clients: RootState.ClientState,\n  contractors: RootState.ContractorState,\n  contracts: RootState.ContractState\n): Treebeard.Data[] => [\n  {\n    id: 'clients',\n    name: 'Zadavatelé',\n    children: createDataClients(clients, contracts)\n  },\n  {\n    id: 'contractors',\n    name: 'Výherci',\n    children: createDataContractors(contractors)\n  }\n];\n\nexport const createDataClients = (\n  clients: RootState.ClientState,\n  contracts: RootState.ContractState\n): Treebeard.Data[] =>\n  clients.map((client) => ({\n    id: `client_${client.ico}`,\n    name: client.name,\n    children: [\n      {\n        id: `client_contracts_${client.ico}`,\n        name: 'Zakázky',\n        children: client.contracts.map((contractId) => {\n          const contract = contracts.find((contract) => contract.id === contractId);\n          const subject = contract ? contract.subject : 'Nenalezeno';\n          return {\n            id: `contract_${contractId}`,\n            name: subject\n          };\n        })\n      }\n    ]\n  }));\n\nexport const createDataContractors = (contractors: RootState.ContractorState): Treebeard.Data[] =>\n  contractors.map((contractor) => ({\n    id: `contractor_${contractor.ico}`,\n    name: contractor.name\n  }));\n\nexport const toggleNode = (\n  data: Treebeard.Data,\n  nodeId: string,\n  toggled: boolean\n): Treebeard.Data => {\n  const isCurrentNode = data.id === nodeId;\n\n  const newData: Treebeard.Data = {\n    ...data,\n    active: isCurrentNode\n  };\n  if (data.children) {\n    newData.children = data.children.map((data) => toggleNode(data, nodeId, toggled));\n  }\n  if (isCurrentNode && data.children) {\n    newData.toggled = toggled;\n  }\n  return newData;\n};\n\nexport const treeReducer = handleActions<\n  RootState.TreeState,\n  Pick<RootState, 'clients' | 'contracts' | 'contractors'> | boolean | ToggleActivePayload | string\n>(\n  {\n    [ContractActions.Type.SET_LOADING]: (state, action) => {\n      return {\n        ...state,\n        data: { ...state.data, loading: !!action.payload }\n      };\n    },\n    [ContractActions.Type.UPDATE_TREE]: (state, action) => {\n      const { clients, contractors, contracts } = action.payload as Pick<\n        RootState,\n        'clients' | 'contracts' | 'contractors'\n      >;\n      return {\n        data: { ...state.data, children: createData(clients, contractors, contracts) },\n        selected: ''\n      };\n    },\n    [ContractActions.Type.TOGGLE_ACTIVE]: (state, action) => {\n      const { id, toggled } = action.payload as ToggleActivePayload;\n      return {\n        data: toggleNode(state.data, id, toggled),\n        selected: id\n      };\n    }\n  },\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { routerReducer, RouterState } from 'react-router-redux';\nimport { clientReducer } from 'app/reducers/clients';\nimport { contractReducer } from 'app/reducers/contract';\nimport { contractorReducer } from 'app/reducers/contractor';\nimport { loadingReducer } from 'app/reducers/loading';\nimport { treeReducer } from 'app/reducers/tree';\n\nexport { RootState, RouterState };\n\n// NOTE: current type definition of Reducer in 'react-router-redux' and 'redux-actions' module\n// doesn't go well with redux@4\nexport const rootReducer = combineReducers<RootState>({\n  router: routerReducer as any,\n  clients: clientReducer as any,\n  contracts: contractReducer as any,\n  contractors: contractorReducer as any,\n  loading: loadingReducer as any,\n  tree: treeReducer as any\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\nimport { App } from './app';\n\n// prepare store\nconst history = createBrowserHistory();\nconst store = configureStore(history);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'react-router-redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport { History } from 'history';\nimport { logger } from 'app/middleware';\nimport { RootState, rootReducer } from 'app/reducers';\n\nexport function configureStore(history: History, initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(logger, routerMiddleware(history), thunk as ThunkMiddleware<\n    RootState\n  >);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<\n    RootState\n  >;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n","import { createAction } from 'redux-actions';\nimport { Checkable, Client, Contract, ContractData, Contractor } from 'app/models';\nimport { RootState } from 'app/reducers';\n\nconst NUMBER_OF_LOADED_CONTRACTS = 15;\n\ninterface APISearchData {\n  items: APISearchItem[];\n}\n\ninterface APISearchItem {\n  identifikator: {\n    idSmlouvy: string;\n  };\n}\n\ninterface APIContractData {\n  predmet: string;\n  Prilohy: APIContractAttachment[];\n  Issues: any[];\n  Platce: {\n    ico: string;\n    nazev: string;\n  };\n  Prijemce: APIContractorData[];\n}\n\ninterface APIContractorData {\n  ico: string;\n  nazev: string;\n}\n\ninterface APIContractAttachment {\n  WordCount: number;\n}\n\nexport interface ToggleActivePayload {\n  id: string;\n  toggled: boolean;\n}\n\nexport interface ToggleCheckedPayload {\n  id: number;\n  type: 'client' | 'contract' | 'contractor';\n  toggled: boolean;\n}\n\nexport namespace ContractActions {\n  export enum Type {\n    ADD_CONTRACT = 'ADD_CONTRACT',\n    LOADING_ERROR = 'LOADING_ERROR',\n    SET_LOADING = 'SET_LOADING',\n    TOGGLE_CHECKED = 'TOGGLE_CHECKED',\n    TOGGLE_ACTIVE = 'TOGGLE_ACTIVE',\n    UPDATE_TREE = 'UPDATE_TREE'\n  }\n\n  export const loadContracts = () => async (dispatch: Function) => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await fetch('/api/search.json');\n      const data: APISearchData = await response.json();\n      const items: number[] = data.items\n        .slice(0, NUMBER_OF_LOADED_CONTRACTS)\n        .map((item) => parseInt(item.identifikator.idSmlouvy));\n\n      console.log(items);\n\n      const pContracts: Promise<ContractData>[] = items.map(async (contractId) => {\n        const response = await fetch(`/api/contract-${contractId}.json`);\n        const data: APIContractData = await response.json();\n\n        return {\n          id: contractId,\n          subject: data.predmet,\n          numberOfErrors: data.Issues.length,\n          numberOfWords: data.Prilohy.reduce((sum, attachment) => sum + attachment.WordCount, 0),\n          contractors: data.Prijemce.map((d) => ({\n            ico: parseInt(d.ico),\n            name: d.nazev\n          })),\n          client: {\n            ico: parseInt(data.Platce.ico),\n            name: data.Platce.nazev\n          }\n        } as ContractData;\n      });\n\n      const contracts = await Promise.all(pContracts);\n      contracts.forEach((contract: ContractData) => {\n        dispatch(addContract(contract));\n      });\n    } catch (e) {\n      loadingError(e);\n    } finally {\n      dispatch(updateTreeThunk());\n      dispatch(setLoading(false));\n    }\n  };\n\n  export const toggleCheckedAll = (\n    checkableArray: { checkable: Checkable; type: string }[],\n    toggled: boolean\n  ) => (dispatch: Function) => {\n    checkableArray.forEach(({ checkable, type }) => {\n      switch (type) {\n        case 'contract':\n          const contract = checkable as Contract;\n          dispatch(toggleChecked({ id: contract.id, type: 'contract', toggled: toggled }));\n          break;\n        case 'client':\n          const client = checkable as Client;\n          dispatch(toggleChecked({ id: client.ico, type: 'client', toggled: toggled }));\n          break;\n        case 'contractor':\n          const contractor = checkable as Contractor;\n          dispatch(toggleChecked({ id: contractor.ico, type: 'contractor', toggled: toggled }));\n          break;\n      }\n    });\n  };\n\n  export const updateTreeThunk = () => (dispatch: Function, getState: () => RootState) => {\n    const { clients, contracts, contractors } = getState();\n    dispatch(updateTree({ clients, contracts, contractors }));\n  };\n\n  export const updateTree = createAction<Pick<RootState, 'clients' | 'contracts' | 'contractors'>>(\n    Type.UPDATE_TREE\n  );\n  export const toggleActive = createAction<ToggleActivePayload>(Type.TOGGLE_ACTIVE);\n  export const toggleChecked = createAction<ToggleCheckedPayload>(Type.TOGGLE_CHECKED);\n  export const loadingError = createAction<Error>(Type.LOADING_ERROR);\n  export const addContract = createAction<ContractData>(Type.ADD_CONTRACT);\n  export const setLoading = createAction<Boolean>(Type.SET_LOADING);\n}\n\nexport type ContractActions = Omit<typeof ContractActions, 'Type'>;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_3TK86\",\"message\":\"_33Jvj\",\"checked\":\"_2tN5B\",\"unchecked\":\"_10Bnm\",\"button\":\"_1L-Mg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_1XP1U\",\"split-container\":\"_1V4K2\",\"right\":\"_3HFLK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clientTableContainer\":\"_2WTtL\",\"clientTable\":\"_3RxrK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"_2omFd\",\"loading\":\"_3ZXyf\",\"lds-ring\":\"_1wxTH\"};"],"sourceRoot":""}